<div class="container-fluid">
    <!-- Header with game info -->
    <div class="row mb-4 mt-3">
      <div class="col-12 text-center">
        <h2 class="text-white"><%= romFile.filename.replace(/\.[^/.]+$/, '') %></h2>
        <p class="text-secondary"><%= romFile.category %></p>

        <% if (isNonGame) { %>
          <div class="alert alert-warning" role="alert">
            <i class="fas fa-exclamation-triangle"></i>
            Warning: This file may not be a game ROM and might not work properly in the web emulator.
            See the <a href="/about" class="alert-link">About</a> page for more information.
          </div>
        <% } %>
      </div>
    </div>

    <!-- Main game container with proper padding and height -->
    <div class="row justify-content-center">
      <div class="col-12 col-lg-10 col-xl-8">
        <div id="game-wrapper" class="position-relative">
          <div id="game" class="w-100"></div>
          <!-- Progress bar inside game container -->
          <div id="progress-container" class="progress-overlay">
            <div class="progress" style="height: 25px; background-color: #2a2a2a; width: 80%; max-width: 500px;">
              <div class="progress-bar progress-bar-striped progress-bar-animated"
                   role="progressbar"
                   style="width: 0%"
                   id="download-progress">
                <span id="progress-text">Loading ROM...</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Disclaimer footer -->
    <div class="row mt-4 mb-3">
      <div class="col-12 text-center">
        <div class="alert alert-secondary" role="alert">
          <small>
            <i class="fas fa-info-circle"></i>
            This emulator loads ROMs directly from <a href="https://myrient.erista.me/" class="alert-link">Myrient</a> and is not affiliated with them.
            See the <a href="/about" class="alert-link">About</a> page for more information.
          </small>
        </div>
      </div>
    </div>
  </div>

  <style>
    /* Only keep basic container styling */
    #game-wrapper {
      padding-top: 0;
      background: #222;
      border-radius: 8px;
      overflow: hidden;
      margin-bottom: 20px;
      max-width: 1024px;
      margin-left: auto;
      margin-right: auto;
    }

    /* Keep only the aspect ratio for the game container */
    #game {
      aspect-ratio: 4/3;
      max-height: 700px;
    }

    /* Keep alert styling for consistency */
    .alert-secondary {
      background-color: #2a2a2a;
      border-color: #3a3a3a;
      color: #999;
      display: inline-block;
      margin: 0 auto;
      padding: 0.75rem 1.25rem;
    }

    .alert-secondary a.alert-link {
      color: #bbb;
      text-decoration: underline;
    }

    .alert-secondary a.alert-link:hover {
      color: #fff;
    }

    .progress-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      display: none; /* Hidden by default */
      justify-content: center;
      align-items: center;
      background-color: rgba(0, 0, 0, 0.8);
      z-index: 1000;
    }

    .progress {
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    #progress-text {
      font-size: 14px;
      font-weight: bold;
    }

    .alert-warning {
      display: inline-block;
      margin: 0 auto;
      padding: 0.75rem 1.25rem;
    }
  </style>

  <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>
  <script>
    // Display important notice immediately
    console.log('%cAbout this Page', 'font-size: 20px; font-weight: bold; color: #4CAF50;');
    console.log(
      '%cThis page contains a game emulator that provides access to games through Myrient\'s public archive.\n' +
      'We are not affiliated with or endorsed by Myrient.\n' +
      'Visit the About page for more details on how this integration works and other important information.',
      'font-size: 14px; color: #90CAF9;'
    );
    console.log(`%c${window.location.origin}/about`, 'font-size: 14px; color: #90CAF9;');

    // Configure EmulatorJS
    console.log('[Emulator] Starting emulator configuration');
    console.log('[Emulator] System:', '<%= emulatorConfig.system %>');
    console.log('[Emulator] Core:', '<%= emulatorConfig.core %>');

    window.EJS_player = '#game';
    window.EJS_core = '<%= emulatorConfig.core %>';
    window.EJS_gameUrl = '/proxy-rom/<%= romFile.id %>';
    window.EJS_pathtodata = 'https://cdn.emulatorjs.org/stable/data/';
    window.EJS_startOnLoaded = true;
    window.EJS_gameName = '<%= romFile.filename.replace(/\.[^/.]+$/, "") %>';
    window.EJS_backgroundBlur = true;
    window.EJS_defaultOptions = {
        'save-state-slot': 1,
        'save-state-location': 'local'
    };

    // BIOS configuration
    window.EJS_biosUrl = <% if (emulatorConfig.bios) { %>
        '/proxy-bios?url=' + encodeURIComponent(<%- JSON.stringify(Object.values(emulatorConfig.bios.files)[0].url) %>)
    <% } else { %>
        undefined
    <% } %>;

    console.log('[Emulator] BIOS configuration:', window.EJS_biosUrl);

    // Required for Sega CD ??
    window.EJS_loadStateURL = window.location.href;
    window.EJS_saveStateURL = window.location.href;
    window.EJS_cheats = true;

    // Add error event listener for the emulator
    window.EJS_onGameStart = () => {
        console.log('[Emulator] Game started successfully');
    };

    window.EJS_onLoadState = (state) => {
        console.log('[Emulator] Load state:', state);
    };

    window.EJS_onSaveState = (state) => {
        console.log('[Emulator] Save state:', state);
    };

    window.EJS_onLoadError = (error) => {
        console.error('[Emulator] Load error:', error);
    };

    async function loadRom() {
      try {
        console.log('[Emulator] Starting ROM load process');
        const progressContainer = document.getElementById('progress-container');
        const progressBar = document.getElementById('download-progress');
        const progressText = document.getElementById('progress-text');
        progressContainer.style.display = 'flex';

        const isCompressed = /\.(zip|7z)$/i.test('<%= romFile.filename %>');
        const shouldUnpack = <%= emulatorConfig.unpackRoms %>;
        console.log(`[Emulator] ROM compression status: ${isCompressed ? 'compressed' : 'uncompressed'}`);
        console.log(`[Emulator] Should unpack: ${shouldUnpack}`);

        progressText.textContent = 'Downloading ROM...';
        console.log('[Emulator] Initiating ROM download');

        const response = await fetch(EJS_gameUrl);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        // If we're not unpacking, still show download progress but return direct URL
        if (!isCompressed || !shouldUnpack) {
          const contentLength = response.headers.get('content-length');
          const total = parseInt(contentLength, 10);
          let loaded = 0;

          const reader = response.body.getReader();
          const chunks = [];

          while (true) {
            const { done, value } = await reader.read();
            if (done) break;

            chunks.push(value);
            loaded += value.length;

            const percent = Math.round((loaded / total) * 100);
            progressBar.style.width = percent + '%';
            progressText.textContent = `Downloading ROM: ${percent}%`;
          }

          console.log('[Emulator] Using direct URL for ROM');
          progressContainer.style.display = 'none';

          // Create blob from chunks for direct loading
          const blob = new Blob(chunks);
          return URL.createObjectURL(blob);
        }

        // For compressed files that need unpacking, continue with decompression
        const contentLength = response.headers.get('content-length');
        const total = parseInt(contentLength, 10);
        let loaded = 0;

        const reader = response.body.getReader();
        const chunks = [];

        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          chunks.push(value);
          loaded += value.length;

          const percent = Math.round((loaded / total) * 100);
          progressBar.style.width = percent + '%';
          progressText.textContent = `Downloading ROM: ${percent}%`;
        }

        // Decompression phase
        progressText.textContent = 'Decompressing the game...';
        console.log('[Emulator] Starting ZIP extraction');

        const blob = new Blob(chunks);
        const zip = await JSZip.loadAsync(blob);
        const files = Object.keys(zip.files);
        console.log('[Emulator] ZIP contents:', files);

        const romFile = files.find(f => !zip.files[f].dir);
        if (!romFile) {
          throw new Error('No ROM file found in ZIP archive');
        }
        console.log('[Emulator] Found ROM file in ZIP:', romFile);

        const romData = await zip.files[romFile].async('blob');
        console.log('[Emulator] ROM extraction complete');
        progressContainer.style.display = 'none';
        return URL.createObjectURL(romData);
      } catch (error) {
        console.error('[Emulator] Error in loadRom:', error);
        throw error;
      }
    }

    loadRom()
      .then(romUrl => {
        console.log('[Emulator] ROM loaded successfully, initializing EmulatorJS');
        window.EJS_gameUrl = romUrl;
        const script = document.createElement('script');
        script.src = `${window.EJS_pathtodata}loader.js`;
        script.onerror = (error) => {
          console.error('[Emulator] Failed to load EmulatorJS:', error);
        };
        document.body.appendChild(script);
      })
      .catch(error => {
        console.error('[Emulator] Fatal error:', error);
        const gameDiv = document.getElementById('game');
        gameDiv.innerHTML = `<div class="alert alert-danger">
          Error loading game: ${error.message}
        </div>`;
      });
  </script>